// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Js_int from "../node_modules/rescript/lib/es6/js_int.js";
import * as Belt_Int from "../node_modules/rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Pervasives from "../node_modules/rescript/lib/es6/pervasives.js";
import * as Belt_SetInt from "../node_modules/rescript/lib/es6/belt_SetInt.js";

var data = Fs.readFileSync("./src/data/input_day7.txt", "utf8");

var positions = Belt_Array.map(data.split(","), Belt_Int.fromString);

var posSet = Belt_SetInt.fromArray(positions);

var min = Belt_SetInt.minimum(posSet);

var max = Belt_SetInt.maximum(posSet);

console.log("Position range: ", min, max);

var leastFuel = Belt_Array.reduce(Belt_Array.range(min, max), Js_int.max, (function (leastFuel, pos) {
        var candidate = Belt_Array.reduce(positions, 0, (function (sum, n) {
                return sum + Math.abs(pos - n | 0) | 0;
              }));
        if (candidate < leastFuel) {
          return candidate;
        } else {
          return leastFuel;
        }
      }));

console.log("Least fuel (constant rate): ", leastFuel);

var leastFuel$1 = Belt_Array.reduce(Belt_Array.range(min, max), Pervasives.infinity, (function (leastFuel, pos) {
        var candidate = Belt_Array.reduce(positions, 0.0, (function (total, n) {
                var delta = Math.abs(pos - n | 0);
                var deltaSum = delta * (delta + 1.0) / 2.0;
                return total + deltaSum;
              }));
        if (candidate < leastFuel) {
          return candidate;
        } else {
          return leastFuel;
        }
      }));

console.log("Least fuel (linear rate): ", leastFuel$1);

var sample = "16,1,2,0,4,2,7,1,2,14";

export {
  data ,
  sample ,
  positions ,
  posSet ,
  min ,
  max ,
  leastFuel$1 as leastFuel,
  
}
/* data Not a pure module */
