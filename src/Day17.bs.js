// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Helper from "./Helper.bs.js";
import * as Belt_Set from "../node_modules/rescript/lib/es6/belt_Set.js";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";

function processInput(input) {
  var match = input.split(/,*\s[xy]\=/);
  if (match.length !== 3) {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  var xStr = match[1];
  if (xStr !== undefined) {
    var yStr = match[2];
    if (yStr !== undefined) {
      var match$1 = Helper.ArrayExt.toIntArrExn(xStr.split(".."));
      if (match$1.length !== 2) {
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }
      var trgMinY = match$1[0];
      var trgMaxY = match$1[1];
      var match$2 = Helper.ArrayExt.toIntArrExn(yStr.split(".."));
      if (match$2.length !== 2) {
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }
      var trgMinY$1 = match$2[0];
      var trgMaxY$1 = match$2[1];
      return [
              [
                trgMinY,
                trgMaxY
              ],
              [
                trgMinY$1,
                trgMaxY$1
              ]
            ];
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function add(v1, v2) {
  return {
          x: v1.x + v2.x | 0,
          y: v1.y + v2.y | 0
        };
}

var Vec = {
  add: add
};

function drag(vel) {
  return {
          x: vel.x < 0 ? 1 : (
              vel.x > 0 ? -1 : 0
            ),
          y: 0
        };
}

var grav = {
  x: 0,
  y: -1
};

function move(pos, vel) {
  var pos$1 = add(pos, vel);
  var vel$1 = add(add(vel, drag(vel)), grav);
  return [
          pos$1,
          vel$1
        ];
}

function run(steps, pos, vel) {
  var _hist = [pos];
  var _i = 1;
  var _pos = pos;
  var _vel = vel;
  while(true) {
    var vel$1 = _vel;
    var pos$1 = _pos;
    var i = _i;
    var hist = _hist;
    if (i > steps) {
      return hist;
    }
    var match = move(pos$1, vel$1);
    var pos$p = match[0];
    var hist$1 = Belt_Array.concat(hist, [pos$p]);
    _vel = match[1];
    _pos = pos$p;
    _i = i + 1 | 0;
    _hist = hist$1;
    continue ;
  };
}

function getMaxY(pos, vel) {
  var _i = 0;
  var _pos = pos;
  var _vel = vel;
  while(true) {
    var vel$1 = _vel;
    var pos$1 = _pos;
    var i = _i;
    if (i > 1000) {
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }
    var match = move(pos$1, vel$1);
    var pos$p = match[0];
    console.log(i, pos$1);
    if (pos$p.y < pos$1.y) {
      return pos$1.y;
    }
    _vel = match[1];
    _pos = pos$p;
    _i = i + 1 | 0;
    continue ;
  };
}

function render(hist, param) {
  var match = param[1];
  var trgYMax = match[1];
  var trgYMin = match[0];
  var match$1 = param[0];
  var trgXMax = match$1[1];
  var trgXMin = match$1[0];
  var histPoints = Belt_Set.fromArray(Belt_Array.map(hist, (function (param) {
              return [
                      param.x,
                      param.y
                    ];
            })), Helper.Tuple.CmpInt);
  var match$2 = Belt_Array.unzip(Belt_Set.toArray(histPoints));
  var match_0 = Helper.Tuple.getArrBounds(trgXMin, trgXMax, match$2[0]);
  var match_1 = Helper.Tuple.getArrBounds(trgYMin, trgYMax, match$2[1]);
  var match$3 = match_1;
  var match$4 = match_0;
  var maxX = match$4[1];
  var minX = match$4[0];
  return Belt_Array.forEach(Belt_Array.reverse(Belt_Array.range(match$3[0], match$3[1])), (function (y) {
                console.log(Belt_Array.map(Belt_Array.range(minX, maxX), (function (x) {
                              if (Belt_Set.has(histPoints, [
                                      x,
                                      y
                                    ])) {
                                if (x === 0 && y === 0) {
                                  return "S";
                                } else {
                                  return "#";
                                }
                              } else if (x >= trgXMin && y >= trgYMin && x <= trgXMax && y <= trgYMax) {
                                return "T";
                              } else {
                                return ".";
                              }
                            })).join(""));
                
              }));
}

function solve1(targetArea) {
  var hist = run(30, {
        x: 0,
        y: 0
      }, {
        x: 16,
        y: 10
      });
  Belt_Array.forEachWithIndex(hist, (function (i, pos) {
          console.log(i, pos);
          
        }));
  return render(hist, targetArea);
}

var data = Helper.Input.read("./src/data/input_day17.txt");

var ex1 = "target area: x=20..30, y=-10..-5";

var targetArea = processInput(ex1);

solve1(targetArea);

export {
  processInput ,
  Vec ,
  drag ,
  grav ,
  move ,
  run ,
  getMaxY ,
  render ,
  solve1 ,
  data ,
  ex1 ,
  targetArea ,
  
}
/* data Not a pure module */
