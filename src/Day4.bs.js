// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Belt_Int from "../node_modules/rescript/lib/es6/belt_Int.js";
import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_MapInt from "../node_modules/rescript/lib/es6/belt_MapInt.js";

var raw = Fs.readFileSync("./src/data/input_day4.txt", "utf8");

var data = raw.split("\n");

var drawNums = Belt_List.fromArray(Belt_Array.map(data[0].split(","), Belt_Int.fromString));

var dataRows = Belt_Array.map(Belt_Array.keep(Belt_Array.slice(data, 2, data.length - 2 | 0), (function (str) {
            return str !== "";
          })), (function (str) {
        return Belt_Array.map(Belt_Array.keep(str.split(" "), (function (str) {
                          return str !== "";
                        })), Belt_Int.fromString);
      }));

var boards = Belt_Array.makeBy(dataRows.length / 5 | 0, (function (i) {
        var rows = Belt_Array.slice(dataRows, Math.imul(i, 5), 5);
        var cols = Belt_Array.makeBy(5, (function (j) {
                return Belt_Array.map(rows, (function (row) {
                              return row[j];
                            }));
              }));
        return {
                rows: rows,
                cols: cols
              };
      }));

console.log("Total draws: ", Belt_List.length(drawNums));

function decideWin(arr, draws) {
  return Belt_Array.every(arr, (function (n) {
                return Belt_List.has(draws, n, (function (prim0, prim1) {
                              return prim0 === prim1;
                            }));
              }));
}

function unmarkedSum(rows, draws) {
  return Belt_Array.reduce(rows, 0, (function (sum, row) {
                return sum + Belt_Array.reduce(Belt_Array.keep(row, (function (n) {
                                  return !Belt_List.has(draws, n, (function (prim0, prim1) {
                                                return prim0 === prim1;
                                              }));
                                })), 0, (function (prim0, prim1) {
                              return prim0 + prim1 | 0;
                            })) | 0;
              }));
}

function playBoard(board, drawNums) {
  var _nextDraws = drawNums;
  var _draws = /* [] */0;
  while(true) {
    var draws = _draws;
    var nextDraws = _nextDraws;
    if (!nextDraws) {
      return [
              false,
              0,
              draws
            ];
    }
    var n = nextDraws.hd;
    var draws$1 = Belt_List.add(draws, n);
    var wins = Belt_Array.some(board.rows, (function(draws$1){
        return function (row) {
          return decideWin(row, draws$1);
        }
        }(draws$1))) || Belt_Array.some(board.cols, (function(draws$1){
        return function (col) {
          return decideWin(col, draws$1);
        }
        }(draws$1)));
    if (wins) {
      return [
              true,
              Math.imul(unmarkedSum(board.rows, draws$1), n),
              draws$1
            ];
    }
    _draws = draws$1;
    _nextDraws = nextDraws.tl;
    continue ;
  };
}

var leaderBoard = Belt_MapInt.fromArray(Belt_Array.map(boards, (function (board) {
            var match = playBoard(board, drawNums);
            var drawCount = Belt_List.length(match[2]);
            return [
                    drawCount,
                    {
                      wins: match[0],
                      score: match[1]
                    }
                  ];
          })));

console.log("Leaderboard: ", Belt_MapInt.toArray(leaderBoard));

var firstPlace = Belt_MapInt.minimum(leaderBoard);

console.log("First place: ", firstPlace);

var lastPlace = Belt_MapInt.maximum(leaderBoard);

console.log("Last place: ", lastPlace);

var sample = "7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\n\n22 13 17 11  0\n 8  2 23  4 24\n21  9 14 16  7\n 6 10  3 18  5\n 1 12 20 15 19\n\n 3 15  0  2 22\n 9 18 13 17  5\n19  8  7 25 23\n20 11 10 24  4\n14 21 16 12  6\n\n14 21 17 24  4\n10 16 15  9 19\n18  8 23 26 20\n22 11 13  6  5\n 2  0 12  3  7";

var rowN = 5;

var colN = 5;

export {
  raw ,
  sample ,
  rowN ,
  colN ,
  drawNums ,
  boards ,
  decideWin ,
  unmarkedSum ,
  playBoard ,
  leaderBoard ,
  firstPlace ,
  lastPlace ,
  
}
/* raw Not a pure module */
