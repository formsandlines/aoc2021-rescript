// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as Belt_Int from "../node_modules/rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Caml_array from "../node_modules/rescript/lib/es6/caml_array.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";

var raw = Fs.readFileSync("./src/data/input_day3.txt", "utf8");

var data = Belt_Array.map(Belt_Array.keep(raw.split("\n"), (function (str) {
            return str !== "";
          })), (function (str) {
        return Belt_Array.map(str.split(""), (function (ch) {
                      return Belt_Option.getExn(Belt_Int.fromString(ch));
                    }));
      }));

var dataLen = data.length;

function countColumnBits(data, startCol, colSpan) {
  var arr = Belt_Array.get(data, 0);
  if (arr === undefined) {
    return ;
  }
  var colN = arr.length;
  var sumCol = Belt_Array.makeBy(colN, (function (i) {
          if (i >= startCol && i < (startCol + colSpan | 0)) {
            return 0;
          }
          
        }));
  return Belt_Array.keepMap(Belt_Array.reduce(data, sumCol, (function (counts, bitArr) {
                    if (bitArr.length === colN) {
                      return Belt_Array.zipBy(bitArr, counts, (function (n1, maybe_n2) {
                                    return Belt_Option.map(maybe_n2, (function (n2) {
                                                  return n1 + n2 | 0;
                                                }));
                                  }));
                    } else {
                      return counts;
                    }
                  })), (function (opt) {
                return opt;
              }));
}

var counts = Belt_Option.getExn(countColumnBits(data, 0, Caml_array.get(data, 0).length));

var gammaRate = Number(Belt_Array.reduce(counts, "0b", (function (binStr, n) {
            return binStr + (
                    n > (dataLen / 2 | 0) ? "1" : "0"
                  );
          })));

var epsilonRate = Number(Belt_Array.reduce(counts, "0b", (function (binStr, n) {
            return binStr + (
                    n > (dataLen / 2 | 0) ? "0" : "1"
                  );
          })));

var result = gammaRate * epsilonRate;

console.log(gammaRate, epsilonRate, result);

function convergeByColVal(arr, getColVal) {
  var filterByNthVal = function (arr, index, keepVal) {
    return Belt_Array.keep(arr, (function (vals) {
                  return Caml_array.get(vals, index) === keepVal;
                }));
  };
  var arrLen = Caml_array.get(arr, 0).length;
  var _arr = arr;
  var _index = 0;
  while(true) {
    var index = _index;
    var arr$1 = _arr;
    if (!(index < arrLen && arr$1.length > 1)) {
      return Caml_array.get(arr$1, 0);
    }
    var colVal = Curry._2(getColVal, arr$1, index);
    var selArr = filterByNthVal(arr$1, index, colVal);
    _index = index + 1 | 0;
    _arr = selArr;
    continue ;
  };
}

function count0sAnd1s(arr, index) {
  var all = arr.length;
  if (all <= 0) {
    return [
            0,
            0
          ];
  }
  var ones = Belt_Option.getWithDefault(Belt_Option.flatMap(countColumnBits(arr, index, 1), (function (counts) {
              return Belt_Array.get(counts, 0);
            })), 0);
  var zeros = all - ones | 0;
  return [
          ones,
          zeros
        ];
}

var oxygenGeneratorRating = convergeByColVal(data, (function (arr, index) {
        var match = count0sAnd1s(arr, index);
        if (match[0] >= match[1]) {
          return 1;
        } else {
          return 0;
        }
      }));

var co2ScrubberRating = convergeByColVal(data, (function (arr, index) {
        var match = count0sAnd1s(arr, index);
        if (match[0] >= match[1]) {
          return 0;
        } else {
          return 1;
        }
      }));

function toDecimal(arr) {
  return Number("0b" + arr.join(""));
}

var result$1 = toDecimal(oxygenGeneratorRating) * toDecimal(co2ScrubberRating);

console.log(oxygenGeneratorRating, co2ScrubberRating, result$1);

var sample = "00100\n11110\n10110\n10111\n10101\n01111\n00111\n11100\n10000\n11001\n00010\n01010";

export {
  raw ,
  sample ,
  data ,
  dataLen ,
  countColumnBits ,
  counts ,
  gammaRate ,
  epsilonRate ,
  convergeByColVal ,
  count0sAnd1s ,
  oxygenGeneratorRating ,
  co2ScrubberRating ,
  result$1 as result,
  
}
/* raw Not a pure module */
