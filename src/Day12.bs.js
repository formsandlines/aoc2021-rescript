// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as Helper from "./Helper.bs.js";
import * as Caml_obj from "../node_modules/rescript/lib/es6/caml_obj.js";
import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_SetString from "../node_modules/rescript/lib/es6/belt_SetString.js";

function isLowerCase(str) {
  var firstChar = str[0];
  return firstChar === firstChar.toLowerCase();
}

function keepByNode(arr, node) {
  return Belt_Array.keep(arr, (function (param) {
                if (Caml_obj.caml_equal(param[0], node)) {
                  return true;
                } else {
                  return Caml_obj.caml_equal(param[1], node);
                }
              }));
}

function discardByNode(arr, node) {
  return Belt_Array.keep(arr, (function (param) {
                if (Caml_obj.caml_notequal(param[0], node)) {
                  return Caml_obj.caml_notequal(param[1], node);
                } else {
                  return false;
                }
              }));
}

function genPathTree(links, startNode, endNode, filterFn) {
  var aux = function (links, param, fromNode, toNode) {
    var hadSndVisit = param[1];
    var visited = param[0];
    var fromLinks = keepByNode(links, fromNode);
    var match;
    if (isLowerCase(fromNode)) {
      var visited$1 = {
        hd: fromNode,
        tl: visited
      };
      var match$1 = Curry._4(filterFn, links, fromNode, visited$1, hadSndVisit);
      match = [
        match$1[0],
        match$1[1],
        visited$1
      ];
    } else {
      match = [
        links,
        hadSndVisit,
        visited
      ];
    }
    var visited$2 = match[2];
    var hadSndVisit$1 = match[1];
    var links$1 = match[0];
    return Belt_Array.reduce(fromLinks, [], (function (paths, param) {
                  var a = param[0];
                  var succ = a === fromNode ? param[1] : a;
                  if (succ === toNode) {
                    return Belt_Array.concat(paths, [/* Branch */{
                                  _0: succ,
                                  _1: []
                                }]);
                  } else {
                    return Belt_Array.concat(paths, [/* Branch */{
                                  _0: succ,
                                  _1: aux(links$1, [
                                        visited$2,
                                        hadSndVisit$1
                                      ], succ, toNode)
                                }]);
                  }
                }));
  };
  return /* Branch */{
          _0: startNode,
          _1: aux(links, [
                /* [] */0,
                false
              ], startNode, endNode)
        };
}

function part1(links) {
  var filterVisitedSmallCaves = function (links, lastNode, param, hadSndVisit) {
    return [
            discardByNode(links, lastNode),
            hadSndVisit
          ];
  };
  var pathTree = genPathTree(links, "start", "end", filterVisitedSmallCaves);
  var pathIndexes = Belt_Array.map(Helper.ArrayTree.findPaths(pathTree, "end"), Belt_List.reverse);
  var paths = Belt_Array.map(pathIndexes, (function (index) {
          return Helper.ArrayTree.getPathFromIndex(index, pathTree);
        }));
  console.log("Paths:", Belt_Array.map(paths, (function (path) {
              return Belt_List.toArray(path).join(",");
            })));
  console.log("Path count:", paths.length);
  
}

function part2(links) {
  var hasDuplicate = function (lst) {
    var uniques = Belt_SetString.fromArray(Belt_List.toArray(lst));
    return Belt_List.length(lst) > Belt_SetString.size(uniques);
  };
  var filterVisitedSmallCaves = function (links, lastNode, visited, hadSndVisit) {
    if (lastNode === "start") {
      return [
              discardByNode(links, lastNode),
              hadSndVisit
            ];
    }
    var hadSndVisit$1 = hadSndVisit ? true : hasDuplicate(visited);
    var links$1 = hadSndVisit$1 ? Belt_Array.keep(links, (function (param) {
              var n2 = param[1];
              var n1 = param[0];
              var id = Caml_obj.caml_equal;
              return !(isLowerCase(n1) && Belt_List.has(visited, n1, id) || isLowerCase(n2) && Belt_List.has(visited, n2, id));
            })) : links;
    return [
            links$1,
            hadSndVisit$1
          ];
  };
  var pathTree = genPathTree(links, "start", "end", filterVisitedSmallCaves);
  var pathIndexes = Belt_Array.map(Helper.ArrayTree.findPaths(pathTree, "end"), Belt_List.reverse);
  var paths = Belt_Array.map(pathIndexes, (function (index) {
          return Helper.ArrayTree.getPathFromIndex(index, pathTree);
        }));
  console.log("Paths:", Belt_Array.map(paths, (function (path) {
              return Belt_List.toArray(path).join(",");
            })));
  console.log("Path count:", paths.length);
  
}

var data = Helper.Input.read("./src/data/input_day12.txt");

function processInput(input) {
  return Belt_Array.map(Helper.Input.toLines(input), (function (line) {
                var match = line.trim().split("-");
                if (match.length !== 2) {
                  throw {
                        RE_EXN_ID: "Not_found",
                        Error: new Error()
                      };
                }
                var a = match[0];
                var b = match[1];
                return [
                        a,
                        b
                      ];
              }));
}

var links = processInput(data);

part1(links);

part2(links);

var ex1 = "start-A\nstart-b\nA-c\nA-b\nb-d\nA-end\nb-end";

var ex2 = "dc-end\nHN-start\nstart-kj\ndc-start\ndc-HN\nLN-dc\nHN-end\nkj-sa\nkj-HN\nkj-dc";

var ex3 = "fs-end\nhe-DX\nfs-he\nstart-DX\npj-DX\nend-zg\nzg-sl\nzg-pj\npj-he\nRW-he\nfs-DX\npj-RW\nzg-RW\nstart-pj\nhe-WI\nzg-he\npj-fs\nstart-RW";

export {
  isLowerCase ,
  keepByNode ,
  discardByNode ,
  genPathTree ,
  part1 ,
  part2 ,
  data ,
  ex1 ,
  ex2 ,
  ex3 ,
  processInput ,
  links ,
  
}
/* data Not a pure module */
